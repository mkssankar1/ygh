using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Web;
using GreenChits.Common.Constants;
using System.Web.UI.WebControls;
using System.Configuration;
using System.Xml.Serialization;
using System.IO;
using System.Xml;

namespace GreenChits.Common.Utility
{
    public class CommonFunctions
    {
        public static string GetConnectionString()
        {
            string connectionString = string.Empty;
            string urlDomainName = string.Empty;
            return ConfigurationSettings.AppSettings["ConnStr"].ToString();
        }

        public static string FomatFullName(string salutation, string firstName, string lastName)
        {
            string fullName = salutation;

            if (!string.IsNullOrEmpty(firstName))
            {
                if (!string.IsNullOrEmpty(fullName))
                    fullName += " ";
                fullName += firstName;
            }

            if (!string.IsNullOrEmpty(lastName))
            {
                if (!string.IsNullOrEmpty(fullName))
                    fullName += " ";
                fullName += lastName;
            }

            return fullName;
        }

        public static string GetAreaCode(string phoneNo)
        {
            string AreaCode = string.Empty;
            if (!string.IsNullOrEmpty(phoneNo) && phoneNo.Length > 7)
            {
                AreaCode = phoneNo.Substring(0, 3);
            }
            return AreaCode;
        }

        public static string GetPhoneNo(string phoneNo)
        {
            string phoneNoRest = string.Empty;
            if (!string.IsNullOrEmpty(phoneNo) && phoneNo.Length == 10)
            {
                phoneNoRest = phoneNo.Substring(3);
            }
            return phoneNoRest;
        }

        public static string FormatFaxNo(string FaxNo)
        {
            string FormattedFaxNo = string.Empty;
            if (!string.IsNullOrEmpty(FaxNo.Trim()))
            {
                FormattedFaxNo = "(" + FaxNo.Substring(0, 3) + ")" + FaxNo.Substring(3, 3) + "-" + FaxNo.Substring(6);
            }
            return FormattedFaxNo;
        }

        public static string FormatPhoneNo(string AreaCode, string PhoneNo, string Extn)
        {
            string FormattedPhoneNo = string.Empty;
            if (!string.IsNullOrEmpty(PhoneNo))
            {
                FormattedPhoneNo = "(" + AreaCode + ")" + PhoneNo.Substring(0, 3) + "-" + PhoneNo.Substring(3);
            }
            if (!string.IsNullOrEmpty(Extn))
            {
                FormattedPhoneNo += " [" + Extn + "]";
            }
            return FormattedPhoneNo;
        }

        public static string AccountGenerate()
        {
            Random rnd = new Random();
            return string.Concat(rnd.Next(10000000, 99999999).ToString(), rnd.Next(10000000, 99999999).ToString());
        }

        public static int PinGenerate()
        {
            Random rnd = new Random();
            return rnd.Next(1000, 9999);
        }

        public static int SaltKey()
        {
            Random rnd = new Random();
            return rnd.Next(0, 100);
        }

        public static string GetAutoGeneratedCode()
        {
            string autoGeneratedCode = Guid.NewGuid().ToString();
            autoGeneratedCode = autoGeneratedCode.Replace("-", "");
            autoGeneratedCode = autoGeneratedCode.Substring(autoGeneratedCode.Length - 12);
            return autoGeneratedCode.ToUpper();
        }

        public static string GetUniqueIdentifier()
        {
            string completeUniqueId = Guid.NewGuid().ToString("N").Substring(0, 20);
            return completeUniqueId;
        }

        public static string FormatCommaSeparatedString(string strToBeFormated)
        {
            char[] trimChars = new char[2] { ',', ' ' };

            string formatedString = strToBeFormated.TrimEnd(trimChars).TrimStart(trimChars);
            return formatedString;

        }

        public static string ReadJSON(Stream JSON)
        {
            StreamReader reader = new StreamReader(JSON);
            return reader.ReadToEnd();
        }

        public static void ShowNoResultFound<T>(List<T> source, GridView gv) where T : new()
        {
            if (source == null)
                return;
            source.Add(new T());

            gv.DataSource = source;
            gv.DataBind();

            // Get the total number of columns in the GridView to know what the Column Span should be
            int columnsCount = gv.Columns.Count;
            gv.Rows[0].Cells.Clear();// clear all the cells in the row
            gv.Rows[0].Cells.Add(new TableCell()); //add a new blank cell
            gv.Rows[0].Cells[0].ColumnSpan = columnsCount; //set the column span to the new added cell
            //You can set the styles here
            gv.Rows[0].Cells[0].HorizontalAlign = HorizontalAlign.Center;
            //gv.Rows[0].Cells[0].ForeColor = System.Drawing.Color.Red;
            gv.Rows[0].Cells[0].Font.Bold = true;
            // or you can pass a css class name 
            //gv.Rows[0].Cells[0].CssClass = "EmptyDataRowStyle";
            //set No Results found to the new added cell
            gv.Rows[0].Cells[0].Text = ".....No records found....";//gv.EmptyDataText; // Use GridView's Empty Row message
            gv.PagerStyle.CssClass = "InvisibleControl";
        }


        /// <summary>
        /// Method to add the sort Image to grid view
        /// </summary>
        /// <param name="sortExpression">sort Expression</param>
        /// <param name="sortBy">Sorty By</param>
        /// <param name="gv">GridView Id</param>
        public static void addSortImage(string sortExpression, string sortBy, GridView gv)
        {
            if (gv.Rows.Count > 0)
            {
                GridViewRow grdRow = gv.HeaderRow;
                foreach (TableCell cell in grdRow.Cells)
                {
                    if (cell.HasControls())
                    {
                        LinkButton button = (cell.Controls.Count == 1) ? (LinkButton)cell.Controls[0] : (LinkButton)cell.Controls[1];
                        if ((button != null))
                        {
                            Image image = new Image();
                            image.ImageUrl = "~/images/ascSort.gif";
                            if (sortExpression == button.CommandArgument)
                            {
                                if (sortBy == AppConstant.Ascending)
                                {
                                    image.ImageUrl = "~/images/ascSort.gif";
                                }
                                else
                                {
                                    image.ImageUrl = "~/images/descSort.gif";
                                }
                                cell.Controls.Add(image);
                                break;
                            }

                        }
                    }
                }
            }
        }

        /// <summary>
        /// Creates and Returns the Message Structure required to display in Message Display User Control
        /// </summary>
        /// <param name="message">Message that user wants to be notified with</param>
        /// <param name="severity">Severity of Message:Options are ValidationFailed,Exception,Information,Success,Verbose and Warning</param>
        /// <returns>The Message structure constructed</returns>
        public static GreenChits.Common.Utility.MessageStructure GetMessageStructure(string message, MessageSeverity severity)
        {
            GreenChits.Common.Utility.MessageStructure mS = new GreenChits.Common.Utility.MessageStructure();
            mS.UserFriendlyMessage = message;
            mS.Severity = severity;
            return mS;
        }


        public static string GetConfigurationSettings(string strSearchKey)
        {
            string strTemp = ConfigurationManager.AppSettings[strSearchKey];
            return strTemp;
        }

        /// <summary>
        /// Generates Transaction Id of length 10
        /// First 3 characters will be Numeric
        /// Then 3 characters will alphabets
        /// The last 4 will be numbers again
        /// </summary>
        /// <param name="charactersLength"></param>
        /// <returns></returns>
        public static string GenerateTransactionID(int charactersLength)
        {
            string characterPool = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
            string numberPool = "0123456789";
            char[] alphaNumericString = new char[charactersLength];
            Random randomNumber = new Random();

            for (int index = 0; index < 2; index++)
            {
                alphaNumericString[index] = characterPool[randomNumber.Next(0, characterPool.Length)];
            }
            for (int index = 2; index < 4; index++)
            {
                alphaNumericString[index] = numberPool[randomNumber.Next(0, numberPool.Length)];
            }
            for (int index = 4; index < charactersLength; index++)
            {
                alphaNumericString[index] = characterPool[randomNumber.Next(0, characterPool.Length)];
            }

            return new string(alphaNumericString);
        }

        public static bool IsNullOrEmpty(object obj)
        {
            if (obj == null)
            {
                return true;
            }
            else if (string.IsNullOrEmpty(obj.ToString()))
            {
                return true;
            }
            else
            {
                return false;
            }
        }
        public static string XmlSerialize<T>(T objectToSerialize) where T : class
        {
            if (objectToSerialize == null)
            {
                return null;
            }

            var serializer = new XmlSerializer(objectToSerialize.GetType());

            var settings = new XmlWriterSettings
                {
                    Encoding = new UnicodeEncoding(false, false),
                    Indent = false,
                    OmitXmlDeclaration = false
                };

            using (var textWriter = new StringWriter())
            {
                using (var xmlWriter = XmlWriter.Create(textWriter, settings))
                {
                    serializer.Serialize(xmlWriter, objectToSerialize);
                }
                return textWriter.ToString();
            }
        }

    }
}
